print("::NAA:: -- Auto-Align by Nowoshire - No more .998s!")
-- Create the GUIObjects
--local CoreGui = game:GetService("CoreGui")
local sg = Instance.new("ScreenGui", gethui())
sg.Name = "Auto-Aligner"
sg.ResetOnSpawn = false
sg.Enabled = true

local Container = Instance.new("Frame", sg)
Container.Name = "Container"
Container.BackgroundTransparency = 0
Container.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
Container.BorderSizePixel = 0
Container.Position = UDim2.new(0.2, 0, 0.4, 0)
Container.Size = UDim2.new(0.12, 0, 0.14, 0)
Container.Visible = true

local purpleborder = Instance.new("UIStroke", Container)
purpleborder.Name = "purpleborder"
purpleborder.Color = Color3.fromRGB(40, 0, 100)
purpleborder.Thickness = 2
purpleborder.Transparency = 0.3
purpleborder.Enabled = true

local transpgrad = Instance.new("UIGradient", purpleborder)
transpgrad.Name = "transpgrad"
transpgrad.Rotation = 50
transpgrad.Transparency = NumberSequence.new{
	NumberSequenceKeypoint.new(0, 0),
	NumberSequenceKeypoint.new(0.2, 0.4),
	NumberSequenceKeypoint.new(1, 0.9)
}
transpgrad.Enabled = true

local Frame = Instance.new("Frame", Container)
Frame.Name = "Frame"
Frame.AnchorPoint = Vector2.new(0, 1)
Frame.BackgroundTransparency = 1
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0, 0, 1, 0)
Frame.Size = UDim2.new(1, 0, 0.87, 0)

local UIListLayout = Instance.new("UIListLayout", Frame)
UIListLayout.Name = "UIListLayout"
UIListLayout.Padding = UDim.new(0, 8)
UIListLayout.FillDirection = Enum.FillDirection.Vertical
UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
UIListLayout.SortOrder = Enum.SortOrder.Name
UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center

local _1alignb = Instance.new("Frame", Frame)
_1alignb.Name = "1alignb"
_1alignb.BackgroundColor3 = Color3.fromRGB(70,70,70)
_1alignb.BorderSizePixel = 0
_1alignb.Size = UDim2.new(0.7, 0, 0.25, 0)
_1alignb.Visible = true

local color = Instance.new("Frame", _1alignb)
color.Name = "color"
color.BackgroundColor3 = Color3.fromRGB(220, 0, 0)
color.BorderSizePixel = 0
color.Position = UDim2.new(0, 0, 1, 0)
color.Size = UDim2.new(1, 0, 0.12, 0)
color.Visible = true

local alignb = Instance.new("TextButton", _1alignb)
alignb.Name = "alignb"
alignb.AnchorPoint = Vector2.new(0, 0.5)
alignb.BackgroundTransparency = 1
alignb.BorderSizePixel = 0
alignb.Position = UDim2.new(0, 0, 0.5, 0)
alignb.Size = UDim2.new(1, 0, 0.9, 9)
alignb.FontFace = Font.new("rbxasset://fonts/families/Jura.json", Enum.FontWeight.Medium)
alignb.LineHeight = 1.2
alignb.Text = "Align Parts"
alignb.TextColor3 = Color3.fromRGB(255, 255, 255)
alignb.TextScaled = true
alignb.Visible = true

local _2roundv = Instance.new("Frame", Frame)
_2roundv.Name = "2roundv"
_2roundv.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
_2roundv.BorderSizePixel = 0
_2roundv.Size = UDim2.new(0.7, 0, 0.25, 0)
_2roundv.Visible = true

local TextBox = Instance.new("TextBox", _2roundv)
TextBox.Name = "TextBox"
TextBox.AnchorPoint = Vector2.new(1, 0.5)
TextBox.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
TextBox.BorderSizePixel = 0
TextBox.Position = UDim2.new(1, 0, 0.5, 0)
TextBox.Size = UDim2.new(0.5, 0, 0.9, 0)
TextBox.FontFace = Font.new("rbxasset://fonts/families/Jura.json", Enum.FontWeight.Medium)
TextBox.PlaceholderText = "0.005"
TextBox.Text = "0.005"
TextBox.TextColor3 = Color3.fromRGB(0, 200, 200)
TextBox.TextScaled = true
TextBox.Visible = true

local TextLabel = Instance.new("TextLabel", _2roundv)
TextLabel.Name = "TextLabel"
TextLabel.AnchorPoint = Vector2.new(0, 0.5)
TextLabel.BackgroundTransparency = 1
TextLabel.BorderSizePixel = 0
TextLabel.Position = UDim2.new(0, 5, 0.5, 0)
TextLabel.Size = UDim2.new(0.4, 0, 0.9, 0)
TextLabel.FontFace = Font.new("rbxasset://fonts/families/Jura.json", Enum.FontWeight.Medium)
TextLabel.Text = "Offset"
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.TextScaled = true
TextLabel.Visible = true

local _0banner = Instance.new("TextLabel", Frame)
_0banner.Name = "0banner"
_0banner.AnchorPoint = Vector2.new(0.5, 0)
_0banner.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
_0banner.Size = UDim2.new(0.8, 0, 0.2, 0)
_0banner.FontFace = Font.new("rbxasset://fonts/families/Jura.json", Enum.FontWeight.Bold)
_0banner.Text = "Auto Aligner"
_0banner.TextColor3 = Color3.fromRGB(255, 255, 255)
_0banner.TextScaled = true
_0banner.Visible = true

local UICorner = Instance.new("UICorner", Frame)
UICorner.CornerRadius = UDim.new(0, 8)

local buttons = Instance.new("Frame", Container)
buttons.Name = "buttons"
buttons.AnchorPoint = Vector2.new(1, 0)
buttons.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
buttons.BorderSizePixel = 0
buttons.Position = UDim2.new(1, 0, 0, 0)
buttons.Size = UDim2.new(0.2, 0, 0.2, 0)
buttons.Visible = true

local RectConstraint = Instance.new("UIAspectRatioConstraint", buttons)
RectConstraint.Name = "UIAspectRatioConstraint"
RectConstraint.AspectRatio = 2
RectConstraint.AspectType = Enum.AspectType.ScaleWithParentSize
RectConstraint.DominantAxis = Enum.DominantAxis.Width

local close = Instance.new("ImageButton", buttons)
close.Name = "close"
close.AnchorPoint = Vector2.new(1, 0)
close.BackgroundTransparency = 1
close.BorderSizePixel = 0
close.Position = UDim2.new(1, 0, 0, 0)
close.Size = UDim2.new(0.5, 0, 1, 0)
close.Visible = true
close.Image = "rbxassetid://11907054176"

local SqrConstraint0 = Instance.new("UIAspectRatioConstraint", close)
SqrConstraint0.AspectRatio = 1
SqrConstraint0.AspectType = Enum.AspectType.ScaleWithParentSize
SqrConstraint0.DominantAxis = Enum.DominantAxis.Height

local minimize = Instance.new("ImageButton", buttons)
minimize.Name = "minimize"
minimize.AnchorPoint = Vector2.new(0, 0)
minimize.BackgroundTransparency = 1
minimize.BorderSizePixel = 0
minimize.Position = UDim2.new(0, 0, 0, 0)
minimize.Size = UDim2.new(0.5, 0, 1, 0)
minimize.Visible = true
minimize.Image = "rbxassetid://11907053864"

local SqrConstraint1 = Instance.new("UIAspectRatioConstraint", minimize)
SqrConstraint1.AspectRatio = 1
SqrConstraint1.AspectType = Enum.AspectType.ScaleWithParentSize
SqrConstraint1.DominantAxis = Enum.DominantAxis.Height

local minbuttons = Instance.new("Frame", Container)
minbuttons.Name = "minbuttons"
minbuttons.AnchorPoint = Vector2.new(1, 0)
minbuttons.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
minbuttons.BorderSizePixel = 0
minbuttons.Position = UDim2.new(1, 0, 0, 0)
minbuttons.Size = UDim2.new(0.2, 0, 0.2, 0)
minbuttons.Visible = false

local RectConstraint0 = Instance.new("UIAspectRatioConstraint", minbuttons)
RectConstraint0.Name = "UIAspectRatioConstraint"
RectConstraint0.AspectRatio = 2
RectConstraint0.AspectType = Enum.AspectType.ScaleWithParentSize
RectConstraint0.DominantAxis = Enum.DominantAxis.Width

local close1 = Instance.new("ImageButton", minbuttons)
close1.Name = "close"
close1.AnchorPoint = Vector2.new(1, 0)
close1.BackgroundTransparency = 1
close1.BorderSizePixel = 0
close1.Position = UDim2.new(1, 0, 0, 0)
close1.Size = UDim2.new(0.5, 0, 1, 0)
close1.Image = "rbxassetid://11907054176"

local SqrConstraint2 = Instance.new("UIAspectRatioConstraint", close1)
SqrConstraint2.AspectRatio = 1
SqrConstraint2.AspectType = Enum.AspectType.ScaleWithParentSize
SqrConstraint2.DominantAxis = Enum.DominantAxis.Height

local expand = Instance.new("ImageButton", minbuttons)
expand.Name = "expand"
expand.AnchorPoint = Vector2.new(0, 0)
expand.BackgroundTransparency = 1
expand.BorderSizePixel = 0
expand.Position = UDim2.new(0, 0, 0, 0)
expand.Size = UDim2.new(0.5, 0, 1, 0)
expand.Image = "rbxassetid://11907965976"

local SqrConstraint3 = Instance.new("UIAspectRatioConstraint", expand)
SqrConstraint3.AspectRatio = 1
SqrConstraint3.AspectType = Enum.AspectType.ScaleWithParentSize
SqrConstraint3.DominantAxis = Enum.DominantAxis.Height

-- Dragger
local UIS = game:GetService('UserInputService')
local frame = sg.Container
local dragToggle = nil
local dragSpeed = 0.4
local dragStart = nil
local startPos = nil

local function updateInput(input)
	local delta = input.Position - dragStart
	local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
		startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	--game:GetService('TweenService'):Create(frame, TweenInfo.new(dragSpeed), {Position = position}):Play()
	frame.Position = position
end

local tween1 = game:GetService('TweenService'):Create(transpgrad, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Rotation = 230})
local tween2 = game:GetService('TweenService'):Create(transpgrad, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Rotation = 50})
frame.InputBegan:Connect(function(input)
	if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then 
		dragToggle = true
		dragStart = input.Position
		startPos = frame.Position
		
		tween1:Play()
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragToggle = false
				tween2:Play()
			end
		end)
	end
end)

UIS.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		if dragToggle then
			updateInput(input)
		end
	end
end)

-- Close and Minimize Buttons
close.Activated:Connect(function()
	sg:Destroy()
	script:Destroy()
end)
close1.Activated:Connect(function()
	sg:Destroy()
	script:Destroy()
end)

local as = buttons.AbsoluteSize
minimize.Activated:Connect(function()
	Frame.Visible = false
	buttons.Visible = false
	minbuttons.Visible = true
	game:GetService('TweenService'):Create(Container, TweenInfo.new(0.6, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Size = UDim2.new(0, buttons.AbsoluteSize.X + 10, 0, buttons.AbsoluteSize.Y + 10)}):Play()
	minbuttons.Size = UDim2.new(0, as.X, 0, as.Y)
	game:GetService('TweenService'):Create(minbuttons, TweenInfo.new(0.6, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {AnchorPoint = Vector2.new(0.5, 0.5)}):Play()
	game:GetService('TweenService'):Create(minbuttons, TweenInfo.new(0.6, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Position = UDim2.new(0.5, 0, 0.5, 0)}):Play()
end)

local ogsize0 = Container.Size
local ogsize1 = minbuttons.Size
expand.Activated:Connect(function()
	Frame.Visible = true
	buttons.Visible = true
	minbuttons.Visible = false
	game:GetService('TweenService'):Create(Container, TweenInfo.new(0.6, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {Size = ogsize0}):Play()
	minbuttons.Size = UDim2.new(ogsize1.X, 0, ogsize1.Y, 0)
	minbuttons.AnchorPoint = Vector2.new(1, 0)
	minbuttons.Position = UDim2.new(1, 0, 0, 0)
end)

alignb.Activated:Connect(function ()
	color.BackgroundColor3 = Color3.fromRGB(220, 220, 0)
	-- Sanity Checks.
	if typeof(tonumber(TextBox.Text)) ~= "number" 
	or typeof(tonumber(TextBox.Text)) == "number" and tonumber(TextBox.Text) < 0.002 then return end

	-- Return an editable obby
	local function editable_obby (list)
		local lp = game:GetService("Players").LocalPlayer
		if (lp.PlayerGui:FindFirstChild("CurrentObby").Value == nil or lp.PlayerGui:FindFirstChild("CurrentObby").Value.Name == lp.Name) and lp.PlayerGui:FindFirstChild("CanEdit").Value == true then
			return lp.Name
		elseif lp.PlayerGui:FindFirstChild("CanEdit").Value == false then
			return nil
		end
		for _, whitelisted in pairs(list) do
			if whitelisted == lp.PlayerGui:FindFirstChild("CurrentObby").Value.Name then
				return lp.PlayerGui:FindFirstChild("CurrentObby").Value.Name
			end
		end
		return lp.Name
	end

	local obby = editable_obby(game:GetService("ReplicatedStorage").Events.GetWhitelists:InvokeServer())
	if obby == nil then
		color.BackgroundColor3 = Color3.fromRGB(220, 0, 0)
		warn("::NAA:: -- No obby to align parts in.")
		return
	end

	-- Align Parts in obby.
	print("::NAA:: -- Aligning Parts in "..obby.."'s Obby.")
	for _, PartTypeFolder in pairs(game.Workspace.Obbies[obby].Items:GetChildren()) do
		if PartTypeFolder:IsA("Folder") then
			local MovePartTable = {[1] = {}}
			for _, part in pairs(PartTypeFolder:GetChildren()) do
				if part:IsA("BasePart") then
					if math.round(part.Position.X/TextBox.Text)*TextBox.Text ~= part.Position.X 
					or math.round(part.Position.Y/TextBox.Text)*TextBox.Text ~= part.Position.Y
					or math.round(part.Position.Z/TextBox.Text)*TextBox.Text ~= part.Position.Z then
						table.insert(MovePartTable[1], {
							[1] = part,
							[2] = CFrame.new(Vector3.new(
								math.round(part.Position.X/TextBox.Text)*TextBox.Text,
								math.round(part.Position.Y/TextBox.Text)*TextBox.Text,
								math.round(part.Position.Z/TextBox.Text)*TextBox.Text))*CFrame.Angles(math.rad(part.Rotation.X), math.rad(part.Rotation.Y), math.rad(part.Rotation.Z)),
							[3] = part.Size
						})
						if part.Name == "Moving Part" then -- Additional data for moving parts
							table.insert(MovePartTable[1][#MovePartTable[1]], {
								[1] = Vector3.new(
									math.round(part.m1.Value.X/TextBox.Text)*TextBox.Text,
									math.round(part.m1.Value.Y/TextBox.Text)*TextBox.Text,
									math.round(part.m1.Value.Z/TextBox.Text)*TextBox.Text),
								[2] = Vector3.new(
									math.round(part.m2.Value.X/TextBox.Text)*TextBox.Text,
									math.round(part.m2.Value.Y/TextBox.Text)*TextBox.Text,
									math.round(part.m2.Value.Z/TextBox.Text)*TextBox.Text)
							})
						end
					end
				elseif part.Parent.Name == "Special" and part:IsA("Model") and part:FindFirstChild(part.Name) then
					table.insert(MovePartTable[1], {
						[1] = part:FindFirstChild(part.Name),
						[2] = CFrame.new(Vector3.new(
							math.round(part:FindFirstChild(part.Name).Position.X/TextBox.Text)*TextBox.Text,
							math.round(part:FindFirstChild(part.Name).Position.Y/TextBox.Text)*TextBox.Text,
							math.round(part:FindFirstChild(part.Name).Position.Z/TextBox.Text)*TextBox.Text))*CFrame.Angles(math.rad(part:FindFirstChild(part.Name).Rotation.X), math.rad(part:FindFirstChild(part.Name).Rotation.Y), math.rad(part:FindFirstChild(part.Name).Rotation.Z)),
						[3] = part:FindFirstChild(part.Name).Size
					})
				end
			end
			if #MovePartTable[1] > 0 then
				game:GetService("ReplicatedStorage").Events.MoveObject:InvokeServer(unpack(MovePartTable))
			end
			local function sses(pluralword) -- Truss(es)!!!
				if string.lower(string.sub(pluralword, string.len(pluralword)-1)) == "ss" then
					return pluralword.."es"
				else
					return pluralword
				end 
			end
			print("::NAA:: -- Aligned "..#MovePartTable[1],sses(PartTypeFolder.Name))
		end
	end
	color.BackgroundColor3 = Color3.fromRGB(0, 220, 0)
	task.wait(1)
	color.BackgroundColor3 = Color3.fromRGB(220, 0, 0)
end)

TextBox.FocusLost:Connect(function ()
	if typeof(tonumber(TextBox.Text)) == "number" and tonumber(TextBox.Text) >= 0.001 then
		TextBox.Text = tonumber(TextBox.Text)
		TextBox.PlaceholderText = TextBox.Text
	elseif typeof(tonumber(TextBox.Text)) == "number" and tonumber(TextBox.Text) < 0.001 then
		TextBox.Text = 0.001
		TextBox.PlaceholderText = TextBox.Text
	else
		TextBox.Text = TextBox.PlaceholderText
	end
end)
